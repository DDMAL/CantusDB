"""
Django settings for cantusdb project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from distutils.util import strtobool
from django.contrib.messages import constants as messages
from typing import Optional

# https://ordinarycoders.com/blog/article/django-messages-framework
MESSAGE_TAGS: dict = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR: Optional[str] = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_ROOT: Optional[str] = os.getenv("CANTUSDB_STATIC_ROOT")
MEDIA_ROOT: Optional[str] = os.getenv("CANTUSDB_MEDIA_ROOT")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: Optional[str] = os.getenv("CANTUSDB_SECRET_KEY")

PROJECT_ENVIRONMENT: Optional[str] = os.getenv("PROJECT_ENVIRONMENT")

# DEBUG gets set to True below when PROJECT_ENVIRONMENT == "DEVELOPMENT"
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = False
if PROJECT_ENVIRONMENT == "DEVELOPMENT":
    ALLOWED_HOSTS = os.getenv("CANTUSDB_HOSTS_DEVELOPMENT").split(" ")
    CSRF_TRUSTED_ORIGINS = os.getenv("CANTUSDB_ORIGINS_DEVELOPMENT").split(" ")
    DEBUG = True
elif PROJECT_ENVIRONMENT == "STAGING":
    ALLOWED_HOSTS = os.getenv("CANTUSDB_HOSTS_STAGING").split(" ")
    CSRF_TRUSTED_ORIGINS = os.getenv("CANTUSDB_ORIGINS_STAGING").split(" ")
elif PROJECT_ENVIRONMENT == "PRODUCTION":
    ALLOWED_HOSTS = os.getenv("CANTUSDB_HOSTS_PRODUCTION").split(" ")
    CSRF_TRUSTED_ORIGINS = os.getenv("CANTUSDB_ORIGINS_PRODUCTION").split(" ")
else:
    raise ValueError(
        "The PROJECT_ENVIRONMENT environment variable must be either "
        "DEVELOPMENT, STAGING, or PRODUCTION. "
        f"Its current value is {PROJECT_ENVIRONMENT}."
    )


# Application definition

INSTALLED_APPS: list[str] = [
    "dal",
    "dal_select2",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.flatpages",
    "django.contrib.humanize",
    "django.contrib.postgres",
    "extra_views",
    "main_app",
    "articles",
    "django_quill",  # to provide rich-text field for articles
    "reversion",  # django-reversion, for version history of objects in database
    "users",
]

MIDDLEWARE: list[str] = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.flatpages.middleware.FlatpageFallbackMiddleware",
    "reversion.middleware.RevisionMiddleware",
]

ROOT_URLCONF: str = "cantusdb.urls"

TEMPLATES: list[dict] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "main_app.context_processors.determine_project_environment",
            ],
        },
    },
]

TEMPLATE_LOADERS: str = "django.template.loaders.app_directories.load_template_source"

WSGI_APPLICATION: str = "cantusdb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES: dict = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: list[dict] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE: str = "en-us"

TIME_ZONE: str = "UTC"

USE_I18N: bool = True

USE_L10N: bool = True

USE_TZ: bool = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL: str = "/static/"

STATICFILES_DIRS: list[str] = [os.path.join(BASE_DIR, "static")]

AUTH_USER_MODEL: str = "users.User"
LOGIN_REDIRECT_URL: str = "/"
LOGIN_URL: str = "/login/"
LOGOUT_REDIRECT_URL: str = "/login/"

SITE_ID: int = 4

# New in django 3.2: specify the default type of auto-created primary keys
# https://docs.djangoproject.com/en/3.2/releases/3.2/#customizing-type-of-auto-created-primary-keys
DEFAULT_AUTO_FIELD: str = "django.db.models.AutoField"

EMAIL_BACKEND: str = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST: str = "email-smtp.us-west-2.amazonaws.com"
EMAIL_PORT: int = 587
EMAIL_HOST_USER: Optional[str] = os.getenv("AWS_EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD: Optional[str] = os.getenv("AWS_EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS: bool = True

DEFAULT_FROM_EMAIL: str = "noreply@cantusdatabase.simssa.ca"

# automatically disable all panels which user can then manually enable
DEBUG_TOOLBAR_CONFIG: dict = {
    "DISABLE_PANELS": {
        "debug_toolbar.panels.history.HistoryPanel",
        "debug_toolbar.panels.versions.VersionsPanel",
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        "debug_toolbar.panels.logging.LoggingPanel",
        "debug_toolbar.panels.redirects.RedirectsPanel",
        "debug_toolbar.panels.profiling.ProfilingPanel",
    },
}

INTERNAL_IPS: list[str] = [
    "127.0.0.1",
]

if DEBUG:
    INSTALLED_APPS.append("debug_toolbar")
    # debug toolbar must be inserted as early in the middleware as possible
    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")
