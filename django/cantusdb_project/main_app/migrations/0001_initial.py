# Generated by Django 4.1.7 on 2023-07-25 16:04

from django.conf import settings
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Century",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "centuries",
            },
        ),
        migrations.CreateModel(
            name="Feast",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("feast_code", models.CharField(blank=True, max_length=255, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "month",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                (
                    "day",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(31),
                        ],
                    ),
                ),
                (
                    "prefix",
                    models.CharField(
                        blank=True, editable=False, max_length=2, null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=15)),
                ("description", models.TextField()),
                ("mass_office", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Notation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=63)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Office",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=3)),
                ("description", models.TextField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Provenance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=63)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RismSiglum",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "RISM siglum",
                "verbose_name_plural": "RISM sigla",
            },
        ),
        migrations.CreateModel(
            name="Segment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("name", models.CharField(max_length=63)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                ("published", models.BooleanField(default=False)),
                (
                    "title",
                    models.CharField(
                        help_text="Full Manuscript Identification (City, Archive, Shelf-mark)",
                        max_length=255,
                    ),
                ),
                (
                    "siglum",
                    models.CharField(
                        help_text="RISM-style siglum + Shelf-mark (e.g. GB-Ob 202).",
                        max_length=63,
                    ),
                ),
                (
                    "provenance_notes",
                    models.TextField(
                        blank=True,
                        help_text="More exact indication of the provenance (if necessary)",
                        null=True,
                    ),
                ),
                ("full_source", models.BooleanField(blank=True, null=True)),
                (
                    "date",
                    models.CharField(
                        blank=True,
                        help_text='Date of the manuscript (e.g. "1200s", "1300-1350", etc.)',
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    "cursus",
                    models.CharField(
                        blank=True,
                        choices=[("Monastic", "Monastic"), ("Secular", "Secular")],
                        max_length=63,
                        null=True,
                    ),
                ),
                (
                    "source_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "Editing process (not all the fields have been proofread)",
                                "Editing process (not all the fields have been proofread)",
                            ),
                            ("Published / Complete", "Published / Complete"),
                            (
                                "Published / Proofread pending",
                                "Published / Proofread pending",
                            ),
                            (
                                "Unpublished / Editing process",
                                "Unpublished / Editing process",
                            ),
                            (
                                "Unpublished / Indexing process",
                                "Unpublished / Indexing process",
                            ),
                            (
                                "Unpublished / Proofread pending",
                                "Unpublished / Proofread pending",
                            ),
                            (
                                "Unpublished / Proofreading process",
                                "Unpublished / Proofreading process",
                            ),
                            (
                                "Unpublished / No indexing activity",
                                "Unpublished / No indexing activity",
                            ),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("complete_inventory", models.BooleanField(blank=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("liturgical_occasions", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("selected_bibliography", models.TextField(blank=True, null=True)),
                (
                    "image_link",
                    models.URLField(
                        blank=True,
                        help_text="HTTP link to the image gallery of the source.",
                        null=True,
                    ),
                ),
                ("indexing_notes", models.TextField(blank=True, null=True)),
                ("indexing_date", models.TextField(blank=True, null=True)),
                ("json_info", models.JSONField(blank=True, null=True)),
                (
                    "fragmentarium_id",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("dact_id", models.CharField(blank=True, max_length=15, null=True)),
                ("number_of_chants", models.IntegerField(blank=True, null=True)),
                ("number_of_melodies", models.IntegerField(blank=True, null=True)),
                (
                    "century",
                    models.ManyToManyField(
                        blank=True, related_name="sources", to="main_app.century"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "current_editors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="sources_user_can_edit",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "full_text_entered_by",
                    models.ManyToManyField(
                        blank=True,
                        related_name="entered_full_text_for_sources",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inventoried_by",
                    models.ManyToManyField(
                        blank=True,
                        related_name="inventoried_sources",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "melodies_entered_by",
                    models.ManyToManyField(
                        blank=True,
                        related_name="entered_melody_for_sources",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "notation",
                    models.ManyToManyField(
                        blank=True, related_name="sources", to="main_app.notation"
                    ),
                ),
                (
                    "other_editors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="edited_sources",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "proofreaders",
                    models.ManyToManyField(
                        blank=True,
                        related_name="proofread_sources",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "provenance",
                    models.ForeignKey(
                        blank=True,
                        help_text='If the origin is unknown, select a location where the source was used later in its lifetime and provide details in the "Provenance notes" field.',
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sources",
                        to="main_app.provenance",
                    ),
                ),
                (
                    "rism_siglum",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.rismsiglum",
                    ),
                ),
                (
                    "segment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.segment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Sequence",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                (
                    "visible_status",
                    models.CharField(blank=True, max_length=1, null=True),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("incipit", models.CharField(blank=True, max_length=255, null=True)),
                ("siglum", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "folio",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Binding order",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "s_sequence",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Sequence"
                    ),
                ),
                (
                    "c_sequence",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Each folio starts with "1"',
                        null=True,
                        verbose_name="Sequence",
                    ),
                ),
                ("rubrics", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "analecta_hymnica",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("indexing_notes", models.TextField(blank=True, null=True)),
                ("date", models.CharField(blank=True, max_length=255, null=True)),
                ("col1", models.CharField(blank=True, max_length=255, null=True)),
                ("col2", models.CharField(blank=True, max_length=255, null=True)),
                ("col3", models.CharField(blank=True, max_length=255, null=True)),
                ("ah_volume", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "cantus_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("image_link", models.URLField(blank=True, null=True)),
                ("json_info", models.JSONField(blank=True, null=True)),
                ("marginalia", models.CharField(blank=True, max_length=63, null=True)),
                ("position", models.CharField(blank=True, max_length=63, null=True)),
                ("mode", models.CharField(blank=True, max_length=63, null=True)),
                ("differentia", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "differentia_new",
                    models.CharField(blank=True, max_length=12, null=True),
                ),
                ("finalis", models.CharField(blank=True, max_length=63, null=True)),
                ("extra", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "chant_range",
                    models.CharField(
                        blank=True,
                        help_text='Example: "1-c-k-4". Optional field',
                        max_length=255,
                        null=True,
                    ),
                ),
                ("addendum", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "manuscript_full_text_std_spelling",
                    models.TextField(
                        blank=True,
                        help_text='Manuscript full text with standardized spelling. Enter the words according to the manuscript but normalize their spellings following Classical Latin forms. Use upper-case letters for proper nouns, the first word of each chant, and the first word after "Alleluia" for Mass Alleluias. Punctuation is omitted.',
                        null=True,
                    ),
                ),
                (
                    "manuscript_full_text_std_proofread",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "manuscript_full_text",
                    models.TextField(
                        blank=True,
                        help_text="Enter the wording, word order and spellings as found in the manuscript, with abbreviations resolved to standard words. Use upper-case letters as found in the source. Retain “Xpistum” (Christum), “Ihc” (Jesus) and other instances of Greek characters with their closest approximations of Latin letters. Some punctuation signs and vertical dividing lines | are employed in this field. Repetenda and psalm cues can also be recorded here.",
                        null=True,
                    ),
                ),
                (
                    "manuscript_full_text_proofread",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "manuscript_syllabized_full_text",
                    models.TextField(blank=True, null=True),
                ),
                ("volpiano", models.TextField(blank=True, null=True)),
                ("volpiano_proofread", models.BooleanField(blank=True, null=True)),
                ("volpiano_notes", models.TextField(blank=True, null=True)),
                ("volpiano_intervals", models.TextField(blank=True, null=True)),
                (
                    "cao_concordances",
                    models.CharField(blank=True, max_length=63, null=True),
                ),
                ("melody_id", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                (
                    "content_structure",
                    models.CharField(
                        blank=True,
                        help_text="Additional folio number field, if folio numbers appear on the leaves but are not in the 'binding order'.",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("is_last_chant_in_feast", models.BooleanField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "feast",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.feast",
                    ),
                ),
                (
                    "genre",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.genre",
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "next_chant",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="prev_chant",
                        to="main_app.sequence",
                    ),
                ),
                (
                    "office",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.office",
                    ),
                ),
                (
                    "proofread_by",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main_app.source",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Chant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date this entry was created"
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="The date this entry was updated"
                    ),
                ),
                (
                    "visible_status",
                    models.CharField(blank=True, max_length=1, null=True),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("incipit", models.CharField(blank=True, max_length=255, null=True)),
                ("siglum", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "folio",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Binding order",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "s_sequence",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Sequence"
                    ),
                ),
                (
                    "c_sequence",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Each folio starts with "1"',
                        null=True,
                        verbose_name="Sequence",
                    ),
                ),
                ("rubrics", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "analecta_hymnica",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("indexing_notes", models.TextField(blank=True, null=True)),
                ("date", models.CharField(blank=True, max_length=255, null=True)),
                ("col1", models.CharField(blank=True, max_length=255, null=True)),
                ("col2", models.CharField(blank=True, max_length=255, null=True)),
                ("col3", models.CharField(blank=True, max_length=255, null=True)),
                ("ah_volume", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "cantus_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("image_link", models.URLField(blank=True, null=True)),
                ("json_info", models.JSONField(blank=True, null=True)),
                ("marginalia", models.CharField(blank=True, max_length=63, null=True)),
                ("position", models.CharField(blank=True, max_length=63, null=True)),
                ("mode", models.CharField(blank=True, max_length=63, null=True)),
                ("differentia", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "differentia_new",
                    models.CharField(blank=True, max_length=12, null=True),
                ),
                ("finalis", models.CharField(blank=True, max_length=63, null=True)),
                ("extra", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "chant_range",
                    models.CharField(
                        blank=True,
                        help_text='Example: "1-c-k-4". Optional field',
                        max_length=255,
                        null=True,
                    ),
                ),
                ("addendum", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "manuscript_full_text_std_spelling",
                    models.TextField(
                        blank=True,
                        help_text='Manuscript full text with standardized spelling. Enter the words according to the manuscript but normalize their spellings following Classical Latin forms. Use upper-case letters for proper nouns, the first word of each chant, and the first word after "Alleluia" for Mass Alleluias. Punctuation is omitted.',
                        null=True,
                    ),
                ),
                (
                    "manuscript_full_text_std_proofread",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "manuscript_full_text",
                    models.TextField(
                        blank=True,
                        help_text="Enter the wording, word order and spellings as found in the manuscript, with abbreviations resolved to standard words. Use upper-case letters as found in the source. Retain “Xpistum” (Christum), “Ihc” (Jesus) and other instances of Greek characters with their closest approximations of Latin letters. Some punctuation signs and vertical dividing lines | are employed in this field. Repetenda and psalm cues can also be recorded here.",
                        null=True,
                    ),
                ),
                (
                    "manuscript_full_text_proofread",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "manuscript_syllabized_full_text",
                    models.TextField(blank=True, null=True),
                ),
                ("volpiano", models.TextField(blank=True, null=True)),
                ("volpiano_proofread", models.BooleanField(blank=True, null=True)),
                ("volpiano_notes", models.TextField(blank=True, null=True)),
                ("volpiano_intervals", models.TextField(blank=True, null=True)),
                (
                    "cao_concordances",
                    models.CharField(blank=True, max_length=63, null=True),
                ),
                ("melody_id", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                (
                    "content_structure",
                    models.CharField(
                        blank=True,
                        help_text="Additional folio number field, if folio numbers appear on the leaves but are not in the 'binding order'.",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("is_last_chant_in_feast", models.BooleanField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_created_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "feast",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.feast",
                    ),
                ),
                (
                    "genre",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.genre",
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_last_updated_by_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "next_chant",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="prev_chant",
                        to="main_app.chant",
                    ),
                ),
                (
                    "office",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_app.office",
                    ),
                ),
                (
                    "proofread_by",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main_app.source",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="feast",
            constraint=models.CheckConstraint(
                check=models.Q(("month__gte", 1), ("month__lte", 12)),
                name="month_gte_1_lte_12",
            ),
        ),
        migrations.AddConstraint(
            model_name="feast",
            constraint=models.CheckConstraint(
                check=models.Q(("day__gte", 1), ("day__lte", 31)),
                name="day_gte_1_lte_31",
            ),
        ),
    ]
